// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  clerkUserId    String         @unique
  email         String         @unique
  name          String?
  imageUrl      String?
  industry      String?

  industryInsight  IndustryInsight? @relation(fields: [industry],references: [industry])


  bio   String?
  experience  Int?
  skills      String[]

  assessments  Assesment[]
  resume       Resume?
  coverLetter  CoverLetter[]
}

model Assesment{
 id       String      @id @default(cuid())
 userId   String      
 user     User        @relation(fields: [userId],references: [id])
 quizScore Float
 questions  Json[]
 category   String
 improvmentTip String?
 createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt


 @@index([userId])  //Index this table with userId
}

model CoverLetter{
 id     String @id @default(cuid())
  userId  String   @unique
  user    User  @relation(fields: [userId],references: [id])
  content   String
  jobDescription  String?
  companyName  String
  jobTitle  String
  createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt


 @@index([userId])  //Index this table with userId
}

model Resume{
  id     String @id @default(cuid())
  userId  String   @unique
  user    User  @relation(fields: [userId],references: [id])
  content  String  @db.Text //Markdown content
  createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt


}

model IndustryInsight{
 id    String  @default(cuid())
 industry  String @unique


 users      User[]

 salaryRanges  Json[]


//industry trends

growthRate  Float
demandLevel  DemandLevel
topSkills    String[]

//Market conditions
marketOutlook MarketOutlook
keyTrends     String[]

//Learning Suggestions
recommendedSkills  String[]

lastUpdated   DateTime @default(now())
nextUpdate    DateTime //Scheduled updation  

@@index([industry])


}


enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}